# https://docs.fastlane.tools/advanced/Fastfile/#using-fastlane_require
fastlane_require 'dotenv'
import 'helpers.rb'

XCODEPROJ = 'ios/TradeHounds.xcodeproj'
XCODEWORKSPACE = 'ios/TradeHounds.xcworkspace'
IOS_BUILD_OUTPUT_DIRECTORY = './ios_build'
ANDROID_BUILD_OUTPUT_DIRECTORY = '../android_build'
PLIST_PATH = 'TradeHounds/Info.plist'
RICH_PUSH_PLIST_PATH = 'rich_push/Info.plist'

PODFILE_PATH = 'ios/Podfile'
ENTITLEMENTS_PATH = 'TradeHounds/TradeHounds.entitlements'
ICON_PATH = 'fastlane/metadata/app_icon.png'
GRADLE_FILE_PATH = './android/app/build.gradle'
METADATA_PATH = 'fastlane/metadata'
SUPPLY_JSON_KEY_PATH = 'fastlane/supply_key.json'
ANDROID_RELEASE_NOTES_PATH = 'fastlane/metadata/android/en-US/changelogs/default.txt'
ANDROID_NOTIFICATION_ICON_FILENAME = 'ic_notification'
ANDROID_STAT_ICON_FILENAME = 'ic_stat_name'
ANDROID_APP_ICON_MIPMAP_PATH = './android/app/src/main/res/mipmap'
ANDROID_APP_ICON_DRAWABLE_PATH = './android/app/src/main/res/drawable'
ANDROID_APP_ICON_GLOB_PATH = "/android/app/src/**/res/{mipmap,drawable}-*/{ic_launcher,ic_launcher_round,ic_notification,ic_notification_round,ic_stat_name,ic_stat_name_round}.{png,PNG}"
IOS_APP_ICON_GLOB_PATH = '/ios/TradeHounds/Images.xcassets/AppIcon.appiconset/*.{png,PNG}'
IOS_APP_ICON_SET_PATH = 'ios/TradeHounds/Images.xcassets'
APPSTORE_CONNECT_API_KEY_PATH = 'fastlane/TradeHounds_AuthKey.p8'
PRIMARY_TARGET = 'TradeHounds'
RICH_PUSH_TARGET = 'rich_push'

BUILD_NUMBER_INCREMENT = 1

FORCE_MATCH = false

# Google::Apis.logger.level = Logger::DEBUG
# ENV["VERBOSE"] = "true"

platform :ios do
  desc 'New build for iOS App Store'
  
  before_all do |lane, options|
    if (!["dev", "dev2", "staging", "prod"].include?(options[:target]))
      UI.user_error!('You must supply a valid target environment when running fastlane ("dev", "dev2", "staging", or "prod"). Example: fastlane ios build target:dev')
    end

    if !is_ci?
      case options[:target]
        when "dev2"
          Dotenv.load('../.env.development_2')
          UI.success('Loaded .env.development_2')
        when "dev"
          Dotenv.load('../.env.development')
          UI.success('Loaded .env.development')
        when "staging"
          Dotenv.load('../.env.staging')
          UI.success('Loaded .env.staging')
        when "prod"
          Dotenv.load('../.env.production')
          UI.success('Loaded .env.production')
      end
    end
  end

  lane :config do |options|
    app_store_connect_api_key(
      key_id: "#{ENV["APPSTORE_CONNECT_API_KEY_ID"]}",
      issuer_id: "#{ENV["APPSTORE_CONNECT_API_ISSUER_ID"]}",
      key_filepath: APPSTORE_CONNECT_API_KEY_PATH,
      in_house: false,
    )

    if is_ci?
      # Initialize keychain and logging for CI builds: https://docs.fastlane.tools/actions/setup_ci/
      setup_ci
    else
      # https://docs.fastlane.tools/actions/register_devices/
      register_devices(
        devices_file: "./fastlane_registered_devices.txt",
        api_key_path: APPSTORE_CONNECT_API_KEY_PATH,
      )
    end

    # Ensure app ID matches Appfile configuration: https://docs.fastlane.tools/actions/update_app_identifier/
    update_app_identifier(
      xcodeproj: XCODEPROJ,
      plist_path: PLIST_PATH,
      app_identifier: "#{ENV["FASTLANE_APP_IDENTIFIER"]}",
    )

    # Ensure app ID matches Appfile configuration: https://docs.fastlane.tools/ actions/update_app_identifier/
    update_app_identifier(
      xcodeproj: XCODEPROJ,
      plist_path: RICH_PUSH_PLIST_PATH,
      app_identifier: "#{ENV["FASTLANE_APP_IDENTIFIER"]}.rich-push",
    )

    # Update Facebook analytics IDs and app display name: (MODIFIED) https://docs.fastlane.tools/actions/update_info_plist/
    # This action is located in fastlane/actions/update_plist_file. Fastlane's update_info_plist didn't quite work for us
    # since we also want to update the entitlements file (also a .plist file) which fastlane doesn't support oddly enough
    update_plist_file(
      xcodeproj: XCODEPROJ,
      plist_path: PLIST_PATH,
      block: proc do |plist|
        plist["CFBundleDisplayName"] = "#{ENV["APP_DISPLAY_NAME"]}"
        UI.success("CFBundleDisplayName change to #{plist["CFBundleDisplayName"]}")
  
        index_of_cf_bundle_url_schemes = plist["CFBundleURLTypes"].index{|x| x["CFBundleURLSchemes"]}
        plist["CFBundleURLTypes"][index_of_cf_bundle_url_schemes]
        cf_bundle_url_schemes = plist["CFBundleURLTypes"][index_of_cf_bundle_url_schemes]["CFBundleURLSchemes"]
        index_of_fb_id = cf_bundle_url_schemes.index{|x| x[0..1] == "fb"}
        plist["CFBundleURLTypes"][index_of_cf_bundle_url_schemes]["CFBundleURLSchemes"][index_of_fb_id] = "fb#{ENV["FACEBOOK_APP_ID"]}"
        UI.success("Facebook ID changed to #{plist["CFBundleURLTypes"][index_of_cf_bundle_url_schemes]["CFBundleURLSchemes"][index_of_fb_id]}")
  
        plist["FacebookDisplayName"] = "#{ENV["FACEBOOK_APP_NAME"]}"
        UI.success("FacebookDisplayName changed to #{plist["FacebookDisplayName"]}")
        plist["FacebookAppID"] = "#{ENV["FACEBOOK_APP_ID"]}"
        UI.success("FacebookAppID changed to #{plist["FacebookAppID"]}")
  
        plist["CleverTapAccountID"] = "#{ENV["CLEVERTAP_ACCOUNT_ID"]}"
        UI.success("CleverTapAccountID changed to #{plist["CleverTapAccountID"]}")
        plist["CleverTapToken"] = "#{ENV["CLEVERTAP_TOKEN"]}"
        UI.success("CleverTapToken changed to #{plist["CleverTapToken"]}")

        plist["bugsnag"]["apiKey"] = "#{ENV["BUGSNAG_API_KEY"]}"
        UI.success("bugsnag api key changed to #{plist["bugsnag"]["apiKey"]}")
      end
    )
  
    # Update associated domains (same custom update_plist_file action - see note above)
    update_plist_file(
      xcodeproj: XCODEPROJ,
      plist_path: ENTITLEMENTS_PATH,
      block: proc do |entitlements|
        entitlements["com.apple.developer.associated-domains"] = ["applinks:#{ENV["PRIMARY_ASSOCIATED_DOMAIN"]}"]
        UI.success("Associated Domains change to #{entitlements["com.apple.developer.associated-domains"]}")
      end
    )

    update_project_team(
      path: XCODEPROJ,
      teamid: "4667T6VNGQ" # developer portal team id
    )

    # https://docs.fastlane.tools/actions/match/
    match(
      force: FORCE_MATCH,
      force_for_new_devices: true,
      type: "appstore",
      readonly: is_ci?,
      output_path: IOS_BUILD_OUTPUT_DIRECTORY,
      generate_apple_certs: true,
      profile_name: returniOSOutputNameForTargetEnv(options[:target], 'Release'),
      app_identifier: "#{ENV["FASTLANE_APP_IDENTIFIER"]}",
      git_url: "#{ENV["MATCH_GIT_URL"]}"
    )

    # https://docs.fastlane.tools/actions/match/
    match(
      force: FORCE_MATCH,
      force_for_new_devices: true,
      type: "adhoc",
      readonly: is_ci?,
      output_path: IOS_BUILD_OUTPUT_DIRECTORY,
      generate_apple_certs: true,
      profile_name: returniOSOutputNameForTargetEnv(options[:target], 'Adhoc'),
      app_identifier: "#{ENV["FASTLANE_APP_IDENTIFIER"]}",
      git_url: "#{ENV["MATCH_GIT_URL"]}"
    )

    # https://docs.fastlane.tools/actions/match/
    match(
      force: FORCE_MATCH,
      force_for_new_devices: true,
      type: "development",
      readonly: is_ci?,
      output_path: IOS_BUILD_OUTPUT_DIRECTORY,
      generate_apple_certs: true,
      profile_name: returniOSOutputNameForTargetEnv(options[:target], 'Development'),
      app_identifier: "#{ENV["FASTLANE_APP_IDENTIFIER"]}",
      git_url: "#{ENV["MATCH_GIT_URL"]}"
    )

    # https://docs.fastlane.tools/actions/match/
    match(
      force: FORCE_MATCH,
      force_for_new_devices: true,
      type: "appstore",
      readonly: is_ci?,
      output_path: IOS_BUILD_OUTPUT_DIRECTORY,
      generate_apple_certs: true,
      profile_name: returniOSOutputNameForTargetEnv(options[:target], 'RichPushRelease'),
      app_identifier: "#{ENV["FASTLANE_APP_IDENTIFIER"]}.rich-push",
      git_url: "#{ENV["MATCH_GIT_URL"]}"
    )

      # https://docs.fastlane.tools/actions/match/
    match(
      force: FORCE_MATCH,
      force_for_new_devices: true,
      type: "adhoc",
      readonly: is_ci?,
      output_path: IOS_BUILD_OUTPUT_DIRECTORY,
      generate_apple_certs: true,
      profile_name: returniOSOutputNameForTargetEnv(options[:target], 'RichPushAdhoc'),
      app_identifier: "#{ENV["FASTLANE_APP_IDENTIFIER"]}.rich-push",
      git_url: "#{ENV["MATCH_GIT_URL"]}"
    )

    # https://docs.fastlane.tools/actions/match/
    match(
      force: FORCE_MATCH,
      force_for_new_devices: true,
      type: "development",
      readonly: is_ci?,
      output_path: IOS_BUILD_OUTPUT_DIRECTORY,
      generate_apple_certs: true,
      profile_name: returniOSOutputNameForTargetEnv(options[:target], 'RichPushDevelopment'),
      app_identifier: "#{ENV["FASTLANE_APP_IDENTIFIER"]}.rich-push",
      git_url: "#{ENV["MATCH_GIT_URL"]}"
    )

    # https://docs.fastlane.tools/actions/update_project_provisioning/
    update_project_provisioning(
      xcodeproj: XCODEPROJ,
      profile: ENV["sigh_#{ENV["FASTLANE_APP_IDENTIFIER"]}_development_profile-path"],
      build_configuration: 'Debug',
      code_signing_identity: "iPhone Development",
      target_filter: PRIMARY_TARGET,
    )

    # https://docs.fastlane.tools/actions/update_project_provisioning/
    update_project_provisioning(
      xcodeproj: XCODEPROJ,
      profile: ENV["sigh_#{ENV["FASTLANE_APP_IDENTIFIER"]}_appstore_profile-path"],
      build_configuration: 'Release',
      code_signing_identity: "iPhone Distribution",
      target_filter: PRIMARY_TARGET,
    )

    # https://docs.fastlane.tools/actions/update_project_provisioning/
    update_project_provisioning(
      xcodeproj: XCODEPROJ,
      profile: ENV["sigh_#{ENV["FASTLANE_APP_IDENTIFIER"]}.rich-push_development_profile-path"],
      build_configuration: 'Debug',
      code_signing_identity: "iPhone Development",
      target_filter: RICH_PUSH_TARGET,
    )

    # https://docs.fastlane.tools/actions/update_project_provisioning/
    update_project_provisioning(
      xcodeproj: XCODEPROJ,
      profile: ENV["sigh_#{ENV["FASTLANE_APP_IDENTIFIER"]}.rich-push_appstore_profile-path"],
      build_configuration: 'Release',
      code_signing_identity: "iPhone Distribution",
      target_filter: RICH_PUSH_TARGET,
    )

    UI.success("Successfully configured Trade Hounds for iOS #{options[:target]} target.")
  end
  

  lane :build do |options|
    app_store_connect_api_key(
      key_id: "#{ENV["APPSTORE_CONNECT_API_KEY_ID"]}",
      issuer_id: "#{ENV["APPSTORE_CONNECT_API_ISSUER_ID"]}",
      key_filepath: APPSTORE_CONNECT_API_KEY_PATH,
      in_house: false,
    )

    if is_ci?
      sh("npm i")
    else
      sh("rm -rf node_modules && npm install")
    end

    # https://docs.fastlane.tools/actions/cocoapods/
    cocoapods(
      clean_install: true,
      podfile: PODFILE_PATH
    )
      
    # https://docs.fastlane.tools/actions/get_version_number/
    get_version_number(
      xcodeproj: XCODEPROJ,
      target: PRIMARY_TARGET,
    )

    # https://docs.fastlane.tools/actions/increment_version_number/
    increment_version_number(
      xcodeproj: XCODEPROJ,
      version_number: lane_context[SharedValues::VERSION_NUMBER]
    )

    # https://docs.fastlane.tools/actions/get_build_number/
    get_build_number(xcodeproj: XCODEPROJ)

    # https://docs.fastlane.tools/actions/app_store_build_number/
    app_store_build_number(
      api_key_path: APPSTORE_CONNECT_API_KEY_PATH,
      live: false,
      initial_build_number: 1,
      version: lane_context[SharedValues::VERSION_NUMBER]
    )

    # Detect if we are publishing a build with build number lower or equal to highest build number on testflight,
    # and set local build number to the remote build number if that is the case
    if (lane_context[SharedValues::BUILD_NUMBER].to_i <= lane_context[SharedValues::LATEST_BUILD_NUMBER])
      UI.important("Build number (#{lane_context[SharedValues::BUILD_NUMBER]}) in Info.plist is #{lane_context[SharedValues::BUILD_NUMBER].to_i === lane_context[SharedValues::LATEST_BUILD_NUMBER].to_i ? "equal to" : "lower than"} the highest #{options[:target]} build number (#{lane_context[SharedValues::LATEST_BUILD_NUMBER].to_i}). Incrementing build number to #{lane_context[SharedValues::LATEST_BUILD_NUMBER] + BUILD_NUMBER_INCREMENT}.")

      # https://docs.fastlane.tools/actions/increment_build_number/
      increment_build_number(
        xcodeproj: XCODEPROJ,
        build_number: lane_context[SharedValues::LATEST_BUILD_NUMBER] + BUILD_NUMBER_INCREMENT
      )
    end

    # Generate app icons: https://github.com/KrauseFx/fastlane-plugin-appicon
    appicon(
      appicon_image_file: ICON_PATH,
      appicon_devices: [:ipad, :iphone, :ios_marketing],
      appicon_path: IOS_APP_ICON_SET_PATH
    )

    if (options[:target] != 'prod')
      # Add an app icon badge displaying the environment the app points to: https://github.com/HazAT/badge
      add_badge(
        shield: "#{lane_context[SharedValues::VERSION_NUMBER]}-#{lane_context[SharedValues::BUILD_NUMBER]}-yellow",
        shield_gravity: "South",
        shield_parameters: "style=flat-square",
        custom: returnCustomIconBadgePathForTarget(options[:target]),
        glob: IOS_APP_ICON_GLOB_PATH
      )
    end

    # Generate clean build output directory
    sh("rm -rf #{IOS_BUILD_OUTPUT_DIRECTORY}; mkdir -p #{IOS_BUILD_OUTPUT_DIRECTORY};")

    # Inject certs, switch bundle identifiers, entitlements config, etc
    config(options)

    # https://docs.fastlane.tools/actions/build_ios_app/
    build_ios_app(
      workspace: XCODEWORKSPACE,
      export_method: "app-store",  
      clean: true,
      include_symbols: true,
      include_bitcode: true,
      build_path: IOS_BUILD_OUTPUT_DIRECTORY,
      # derived_data_path: IOS_BUILD_OUTPUT_DIRECTORY,
      archive_path: IOS_BUILD_OUTPUT_DIRECTORY,
      output_directory: IOS_BUILD_OUTPUT_DIRECTORY,
      output_name: returniOSOutputNameForTargetEnv(options[:target], 'Release'),
      scheme: returniOSSchemeForTargetEnv(options[:target]),
    )

    # list contents of ios build output directory
    sh("ls #{IOS_BUILD_OUTPUT_DIRECTORY}")

    UI.success("Successfully built Trade Hounds iOS #{options[:target]} v#{lane_context[SharedValues::VERSION_NUMBER]} build ##{lane_context[SharedValues::BUILD_NUMBER]}.")
  end

  lane :deploy do |options|
    app_store_connect_api_key(
      key_id: "#{ENV["APPSTORE_CONNECT_API_KEY_ID"]}",
      issuer_id: "#{ENV["APPSTORE_CONNECT_API_ISSUER_ID"]}",
      key_filepath: APPSTORE_CONNECT_API_KEY_PATH,
      in_house: false,
    )

    # https://docs.fastlane.tools/actions/get_version_number/
    get_version_number(
      xcodeproj: XCODEPROJ,
      target: PRIMARY_TARGET,
    )

    # https://docs.fastlane.tools/actions/get_build_number/
    get_build_number(xcodeproj: XCODEPROJ)

    groups = ["Development Engineering (Internal Testers)", "Product & Engineering (P&E)"]
    if (options[:target] == 'prod')
      groups.append("Other key stakeholders (Other Internal)")
    end
      
    version_array = "#{lane_context[SharedValues::VERSION_NUMBER]}".split('.')
    file_path = "./internal_release_notes/#{version_array[0]}_#{version_array[1]}_#{version_array[2]}.txt"
    if !File.file?(file_path)
      UI.user_error!("You must supply internal release notes in the fastlane/internal_release_notes folder for production releases. For version 1.0.0, the filename would be 1_0_0.txt.")
    end
    file = File.open(file_path)
    changelog = file.read
    file.close

    # https://docs.fastlane.tools/actions/upload_to_testflight/
    upload_to_testflight(
      reject_build_waiting_for_review: true,
      skip_waiting_for_build_processing: options[:target] != 'prod',
      distribute_external: options[:target] == 'prod',
      changelog: changelog,
      groups: groups,
      ipa: "#{IOS_BUILD_OUTPUT_DIRECTORY}/#{returniOSOutputNameForTargetEnv(options[:target], 'Release')}.ipa"
    )

    if (options[:target] == 'prod')
      # https://docs.fastlane.tools/actions/upload_to_app_store/
      upload_to_app_store(
        app_identifier: "#{ENV["FASTLANE_APP_IDENTIFIER"]}",
        build_number: lane_context[SharedValues::BUILD_NUMBER],
        metadata_path: METADATA_PATH,
        app_icon: ICON_PATH,
        # overwrite_screenshots: true,
        app_version: "#{lane_context[SharedValues::VERSION_NUMBER]}",
        ignore_language_directory_validation: true,
        submit_for_review: true,
        phased_release: true,
        reject_if_possible: true,
        precheck_include_in_app_purchases: false,
        run_precheck_before_submit: true,
        force: true,
        submission_information: {
          add_id_info_uses_idfa: false,
          add_id_info_serves_ads: false,
          add_id_info_tracks_install: false,
          add_id_info_tracks_action: true,
          add_id_info_limits_tracking: true
        }
      )
    end

    download_dsyms(
      version: "#{lane_context[SharedValues::VERSION_NUMBER]}",
      app_identifier: "#{ENV["FASTLANE_APP_IDENTIFIER"]}",
      api_key_path: APPSTORE_CONNECT_API_KEY_PATH,
    )

    # Upload dSYMs to Bugsnag: https://docs.bugsnag.com/build-integrations/fastlane/
    upload_symbols_to_bugsnag(
      api_key: "#{ENV["BUGSNAG_API_KEY"]}",
    )

    # Alert bugsnag of a new build: https://docs.bugsnag.com/build-integrations/fastlane/#reporting-builds-ios-and-android
    send_build_to_bugsnag(
      app_version: "#{lane_context[SharedValues::VERSION_NUMBER]}",
      ios_bundle_version: "#{lane_context[SharedValues::BUILD_NUMBER]}",
      api_key: "#{ENV["BUGSNAG_API_KEY"]}",
      provider: 'github'
    )

    message = "Uploaded Trade Hounds iOS #{options[:target]} v#{lane_context[SharedValues::VERSION_NUMBER]} build ##{lane_context[SharedValues::BUILD_NUMBER]}. Please allow several minutes for the app to propegate to TestFlight for testing."

    if (ENV["SLACK_WEBHOOK_URL"])
      fields = [
        {
          title: "Environment",
          value: options[:target],
          short: true
        },
        {
          title: "Version",
          value: lane_context[SharedValues::VERSION_NUMBER],
          short: true
        },
        {
          title: "Build #",
          value: lane_context[SharedValues::BUILD_NUMBER],
          short: true
        },
        {
          title: "App display name",
          value: ENV['APP_DISPLAY_NAME'],
          short: true
        },
        {
          title: "TestFlight testing link",
          value: returnTestflightTestingLinkForTarget(options[:target]),
          short: true
        }
      ]

      if is_ci?
        fields.append({
          title: "Deployment overview:",
          value: "https://github.com/tradehounds/fe/actions/runs/#{ENV['GITHUB_RUN_ID']}",
          short: true
        })
      end

      # Send a message to the Trade Hounds mobile-releases channel: https://docs.fastlane.tools/actions/slack/
      slack(
        message: message,
        success: true,
        slack_url: "#{ENV["SLACK_WEBHOOK_URL"]}",
        default_payloads: [],
        username: 'TradeHounds Bot 🤖',
        attachment_properties: {
          fields: fields
        }
      )
    end

    UI.success(message)
  end
end

platform :android do 
  desc 'New build for Google Play'

  before_each do |lane, options|
    if (!["dev", "dev2", "staging", "prod"].include?(options[:target]))
      UI.user_error!('You must supply a valid target environment when running fastlane ("dev", "dev2", "staging", or "prod"). Example: fastlane android build target:dev')
    end

    if !is_ci?
      case options[:target]
        when "dev2"
          Dotenv.load('../.env.development_2')
          UI.success('Loaded .env.development_2')
        when "dev"
          Dotenv.load('../.env.development')
          UI.success('Loaded .env.development')
        when "staging"
          Dotenv.load('../.env.staging')
          UI.success('Loaded .env.staging')
        when "prod"
          Dotenv.load('../.env.production')
          UI.success('Loaded .env.production')
      end
    end
  end

  lane :build do |options|
    if is_ci?
      sh("npm i")
    else
      sh("rm -rf node_modules && npm install")
    end

    # Get android version: https://github.com/beplus/fastlane-plugin-versioning_android
    android_get_version_name(gradle_file: GRADLE_FILE_PATH)

    if (options[:target] == 'prod')
      # google_play_track_version_codes: https://docs.fastlane.tools/actions/google_play_track_version_codes/
      begin
        internal_track_version_code = google_play_track_version_codes(
          track: "internal",
          json_key: SUPPLY_JSON_KEY_PATH,
          package_name: "#{ENV['ANDROID_PACKAGE_NAME']}"
        )[0].to_i || 1
      rescue => ex
        internal_track_version_code = 1
        UI.error(ex)
      end
      begin
        alpha_track_version_code = google_play_track_version_codes(
          track: "alpha",
          json_key: SUPPLY_JSON_KEY_PATH,
          package_name: "#{ENV['ANDROID_PACKAGE_NAME']}"
        )[0].to_i || 1
      rescue => ex
        alpha_track_version_code = 1
        UI.error(ex)
      end
      begin
        beta_track_version_code = google_play_track_version_codes(
          track: "beta",
          json_key: SUPPLY_JSON_KEY_PATH,
          package_name: "#{ENV['ANDROID_PACKAGE_NAME']}"
        )[0].to_i || 1
      rescue => ex
        beta_track_version_code = 1
        UI.error(ex)
      end
      begin
        production_track_version_code = google_play_track_version_codes(
          track: "production",
          json_key: SUPPLY_JSON_KEY_PATH,
          package_name: "#{ENV['ANDROID_PACKAGE_NAME']}"
        )[0].to_i || 1
      rescue => ex
        production_track_version_code = 1
        UI.error(ex)
      end

      remote_version_codes = [
        internal_track_version_code,
        alpha_track_version_code,
        beta_track_version_code,
        production_track_version_code
      ]

      remote_code = remote_version_codes.max()

      UI.command_output("Remote code: #{remote_code}")
      
      # Get android build number: https://github.com/beplus/fastlane-plugin-versioning_android
      version_code = android_get_version_code(gradle_file: GRADLE_FILE_PATH).to_i
      
      # Detect if we are publishing a build with build number lower or equal to highest build number on google play,
      # and set local build number to the remote build number if that is the case
      if (version_code <= remote_code)
        UI.important("Build number (#{version_code}) in AndroidManifest.xml is #{version_code === remote_code ? "equal to" : "lower than"} the highest Build number for the #{options[:target]} #{returnTrackForTarget(options[:target])} track (#{remote_code}). Incrementing version code to #{remote_code + BUILD_NUMBER_INCREMENT}.")
        version_code = remote_code + BUILD_NUMBER_INCREMENT
        android_set_version_code(
          version_code: version_code,
          gradle_file: GRADLE_FILE_PATH
        )
      end
    else
      latest_release = firebase_app_distribution_get_latest_release(
        service_credentials_file: returnFirebaseAppDistributionKeyForEnvironment(options[:target]),
        app: returnAndroidFirebaseAppForEnvironment(options[:target]),
      )
      if (latest_release)
        UI.important("Build number (#{latest_release[:buildVersion].to_i}) in AndroidManifest.xml will be incremented to #{latest_release[:buildVersion].to_i + BUILD_NUMBER_INCREMENT}.")
        version_code = latest_release[:buildVersion].to_i + BUILD_NUMBER_INCREMENT
        android_set_version_code(
          version_code: version_code,
          gradle_file: GRADLE_FILE_PATH
        )
      else
        UI.important("No builds found in Firebase App Distribution, so build number will not be incremented.")
      end
    end
    
    # Generate launcher icons
    android_appicon(
      generate_rounded: true,
      appicon_image_file: ICON_PATH,
      appicon_path: ANDROID_APP_ICON_MIPMAP_PATH
    )
    
    # Generate notification icons
    android_appicon(
      generate_rounded: true,
      appicon_image_file: ICON_PATH,
      appicon_icon_types: [:notification],
      appicon_filename: ANDROID_NOTIFICATION_ICON_FILENAME,
      appicon_path: ANDROID_APP_ICON_DRAWABLE_PATH
    )

    # Generate additional notification icons
    android_appicon(
      appicon_image_file: ICON_PATH,
      appicon_icon_types: [:notification],
      appicon_filename: ANDROID_STAT_ICON_FILENAME,
      appicon_path: ANDROID_APP_ICON_DRAWABLE_PATH
    )

    if (options[:target] != 'prod')
      # Add an app icon badge displaying the environment the app points to: https://github.com/HazAT/badge
      add_badge(
        shield: "#{lane_context[SharedValues::ANDROID_VERSION_NAME]}-#{version_code}-yellow",
        shield_gravity: "South",
        shield_parameters: "style=flat-square",
        custom: returnCustomIconBadgePathForTarget(options[:target]),
        glob: ANDROID_APP_ICON_GLOB_PATH
      )
    end

    # generate clean build output directory
    sh("rm -rf #{ANDROID_BUILD_OUTPUT_DIRECTORY}; mkdir -p #{ANDROID_BUILD_OUTPUT_DIRECTORY};")
    
    # run gradle clean and assemble for target
    sh(returnAndroidBuildCommandForTarget(options[:target]))
    
    # copy android aab and mapping files into android build output directory
    sh("cp ../android/app/build/outputs/bundle/#{returnAABPathForTarget(options[:target])} #{ANDROID_BUILD_OUTPUT_DIRECTORY}")

    # list contents of android build output directory
    sh("ls #{ANDROID_BUILD_OUTPUT_DIRECTORY}")

    UI.success("Successfully built Trade Hounds Android #{options[:target]} v#{lane_context[SharedValues::ANDROID_VERSION_NAME]} build ##{version_code}.")
  end

  lane :deploy do |options|
    # Get android version: https://github.com/beplus/fastlane-plugin-versioning_android
    android_get_version_name(gradle_file: GRADLE_FILE_PATH)

    version_code = android_get_version_code(gradle_file: GRADLE_FILE_PATH).to_i

    # https://firebase.google.com/docs/app-distribution/ios/distribute-fastlane
    firebase_app_distribution(
      service_credentials_file: returnFirebaseAppDistributionKeyForEnvironment(options[:target]),
      android_artifact_type: 'AAB',
      android_artifact_path: "./android/app/build/outputs/bundle/#{returnAABPathForTarget(options[:target])}",
      app: returnAndroidFirebaseAppForEnvironment(options[:target]),
      groups: "product-&-engineering-p&e",
      release_notes_file: ANDROID_RELEASE_NOTES_PATH,
      debug: true,
    )

    if (options[:target] == 'prod')
      # Upload newly generated AAB and ProGuard mapping files to Google Play: https://docs.fastlane.tools/actions/upload_to_play_store/
      upload_to_play_store(
        track: returnTrackForTarget(options[:target]),
        aab: "./android/app/build/outputs/bundle/#{returnAABPathForTarget(options[:target])}",
        json_key: SUPPLY_JSON_KEY_PATH,
        package_name: "#{ENV['ANDROID_PACKAGE_NAME']}",
        rollout: options[:target] == 'prod' ? "0.2" : "1"
      )
    end

    # Upload JS sourcemaps to bugsnag
    # https://github.com/bugsnag/bugsnag-sourcemaps
    # https://docs.bugsnag.com/platforms/react-native/showing-full-stacktraces/#uploading-source-maps
    sh("npm run upload-android-sourcemaps-to-bugsnag -- --api-key #{ENV["BUGSNAG_API_KEY"]} --app-version=#{lane_context[SharedValues::ANDROID_VERSION_NAME]} --app-version-code=#{version_code} --bundle=#{returnAndroidMinifiedFilePathForTarget(options[:target])} --source-map=#{returnAndroidSourceMapFilePathForTarget(options[:target])}")
    
    # Alert bugsnag of a new build: https://docs.bugsnag.com/build-integrations/fastlane/#reporting-builds-ios-and-android
    send_build_to_bugsnag(
      app_version: "#{lane_context[SharedValues::ANDROID_VERSION_NAME]}",
      android_version_code: "#{version_code}",
      api_key: "#{ENV["BUGSNAG_API_KEY"]}",
      provider: 'github'
    )

    message = "Uploaded Trade Hounds Android #{options[:target]} v#{lane_context[SharedValues::ANDROID_VERSION_NAME]} build ##{version_code}. Please allow several minutes for the app to propegate to Google Play testing."

    if (ENV["SLACK_WEBHOOK_URL"])
      fields = [
        {
          title: "Environment",
          value: options[:target],
          short: true
        },
        {
          title: "Version",
          value: lane_context[SharedValues::ANDROID_VERSION_NAME],
          short: true
        },
        {
          title: "Build #",
          value: "#{version_code}",
          short: true
        },
        {
          title: "App display name",
          value: ENV['APP_DISPLAY_NAME'],
          short: true
        },
        {
          title: "Google Play track",
          value: returnTrackForTarget(options[:target]),
          short: true
        },
        {
          title: "Google Play testing link",
          value: returnGooglePlayTestingLinkForTarget(options[:target]),
          short: true
        }
      ]

      if is_ci?
        fields.append({
          title: "Deployment overview:",
          value: "https://github.com/tradehounds/fe/actions/runs/#{ENV['GITHUB_RUN_ID']}",
          short: true
        })
      end

      # Send a message to the Trade Hounds mobile-releases channel: https://docs.fastlane.tools/actions/slack/
      slack(
        message: message,
        success: true,
        slack_url: "#{ENV["SLACK_WEBHOOK_URL"]}",
        default_payloads: [],
        username: 'TradeHounds Bot 🤖',
        attachment_properties: {
          fields: fields
        }
      )
    end

    UI.success(message)
  end
end

# Called if lane was not executed successfully
error do |lane, exception|
  notification(message: "Failed to upload")
end
